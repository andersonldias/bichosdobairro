const puppeteer = require('puppeteer');

async function testKeyboardNavigation() {
  console.log('üß™ Iniciando teste de navega√ß√£o por teclado em todos os formul√°rios...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    slowMo: 100,
    defaultViewport: { width: 1200, height: 800 }
  });
  
  const page = await browser.newPage();
  
  try {
    // Navegar para a aplica√ß√£o
    await page.goto('http://localhost:5173');
    console.log('‚úÖ Aplica√ß√£o carregada');
    
    // Aguardar carregamento inicial
    await page.waitForTimeout(2000);
    
    const results = {
      total: 0,
      passed: 0,
      failed: 0,
      details: []
    };

    // Teste 1: Navega√ß√£o por teclado no PetForm (p√°gina de Pets)
    console.log('\nüìã Teste 1: Navega√ß√£o por teclado no PetForm...');
    results.total++;
    
    try {
      // Ir para a p√°gina de Pets
      await page.click('a[href="/pets"]');
      await page.waitForTimeout(1000);
      
      // Abrir formul√°rio de novo pet
      await page.click('button:has-text("Novo Pet")');
      await page.waitForTimeout(1000);
      
      // Testar campo de esp√©cie
      await page.click('input[name="species"]');
      await page.waitForTimeout(500);
      
      // Navegar com setas
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      // Verificar se foi selecionado
      const speciesValue = await page.$eval('input[name="species"]', el => el.value);
      if (speciesValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no campo esp√©cie funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no campo esp√©cie');
        results.failed++;
      }
      
      // Testar campo de ra√ßa
      await page.click('input[name="breed"]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const breedValue = await page.$eval('input[name="breed"]', el => el.value);
      if (breedValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no campo ra√ßa funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no campo ra√ßa');
        results.failed++;
      }
      
      // Fechar formul√°rio
      await page.click('button:has-text("Cancelar")');
      await page.waitForTimeout(500);
      
    } catch (error) {
      console.log('‚ùå Erro no teste do PetForm:', error.message);
      results.failed++;
    }

    // Teste 2: Navega√ß√£o por teclado nos filtros da p√°gina de Pets
    console.log('\nüìã Teste 2: Navega√ß√£o por teclado nos filtros de Pets...');
    results.total++;
    
    try {
      // Testar filtro de esp√©cie
      await page.click('input[placeholder="Filtrar por esp√©cie..."]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const filterSpeciesValue = await page.$eval('input[placeholder="Filtrar por esp√©cie..."]', el => el.value);
      if (filterSpeciesValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no filtro de esp√©cie funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no filtro de esp√©cie');
        results.failed++;
      }
      
      // Testar filtro de ra√ßa
      await page.click('input[placeholder="Filtrar por ra√ßa..."]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const filterBreedValue = await page.$eval('input[placeholder="Filtrar por ra√ßa..."]', el => el.value);
      if (filterBreedValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no filtro de ra√ßa funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no filtro de ra√ßa');
        results.failed++;
      }
      
      // Testar filtro de cliente
      await page.click('input[placeholder="Filtrar por dono..."]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const filterClientValue = await page.$eval('input[placeholder="Filtrar por dono..."]', el => el.value);
      if (filterClientValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no filtro de cliente funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no filtro de cliente');
        results.failed++;
      }
      
    } catch (error) {
      console.log('‚ùå Erro no teste dos filtros:', error.message);
      results.failed++;
    }

    // Teste 3: Navega√ß√£o por teclado no ClientForm
    console.log('\nüìã Teste 3: Navega√ß√£o por teclado no ClientForm...');
    results.total++;
    
    try {
      // Ir para a p√°gina de Clientes
      await page.click('a[href="/clients"]');
      await page.waitForTimeout(1000);
      
      // Abrir formul√°rio de novo cliente
      await page.click('button:has-text("Novo Cliente")');
      await page.waitForTimeout(1000);
      
      // Preencher dados b√°sicos do cliente
      await page.type('input[name="name"]', 'Teste Cliente Teclado');
      await page.type('input[name="phone"]', '11999999999');
      await page.type('input[name="cpf"]', '12345678901');
      await page.type('input[name="street"]', 'Rua Teste');
      await page.type('input[name="number"]', '123');
      await page.type('input[name="neighborhood"]', 'Bairro Teste');
      await page.type('input[name="city"]', 'S√£o Paulo');
      await page.type('input[name="state"]', 'SP');
      await page.type('input[name="cep"]', '01234567');
      
      // Adicionar pet e testar navega√ß√£o por teclado
      await page.click('button:has-text("Adicionar Pet")');
      await page.waitForTimeout(1000);
      
      // Preencher nome do pet
      await page.type('input[name="name"]', 'Pet Teste');
      
      // Testar campo de esp√©cie no pet do cliente
      await page.click('input[name="species"]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const clientPetSpeciesValue = await page.$eval('input[name="species"]', el => el.value);
      if (clientPetSpeciesValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no campo esp√©cie do pet do cliente funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no campo esp√©cie do pet do cliente');
        results.failed++;
      }
      
      // Testar campo de ra√ßa no pet do cliente
      await page.click('input[name="breed"]');
      await page.waitForTimeout(500);
      await page.keyboard.press('ArrowDown');
      await page.waitForTimeout(300);
      await page.keyboard.press('Enter');
      await page.waitForTimeout(500);
      
      const clientPetBreedValue = await page.$eval('input[name="breed"]', el => el.value);
      if (clientPetBreedValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no campo ra√ßa do pet do cliente funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Falha na navega√ß√£o por teclado no campo ra√ßa do pet do cliente');
        results.failed++;
      }
      
      // Fechar formul√°rio
      await page.click('button:has-text("Cancelar")');
      await page.waitForTimeout(500);
      
    } catch (error) {
      console.log('‚ùå Erro no teste do ClientForm:', error.message);
      results.failed++;
    }

    // Teste 4: Teste de Escape para fechar sugest√µes
    console.log('\nüìã Teste 4: Teste de Escape para fechar sugest√µes...');
    results.total++;
    
    try {
      // Ir para Pets novamente
      await page.click('a[href="/pets"]');
      await page.waitForTimeout(1000);
      
      // Abrir formul√°rio
      await page.click('button:has-text("Novo Pet")');
      await page.waitForTimeout(1000);
      
      // Abrir sugest√µes de esp√©cie
      await page.click('input[name="species"]');
      await page.waitForTimeout(500);
      
      // Verificar se as sugest√µes apareceram
      const suggestionsVisible = await page.$('.absolute.z-10');
      if (suggestionsVisible) {
        console.log('‚úÖ Sugest√µes apareceram corretamente');
        
        // Pressionar Escape
        await page.keyboard.press('Escape');
        await page.waitForTimeout(500);
        
        // Verificar se as sugest√µes fecharam
        const suggestionsHidden = await page.$('.absolute.z-10');
        if (!suggestionsHidden) {
          console.log('‚úÖ Escape fechou as sugest√µes corretamente');
          results.passed++;
        } else {
          console.log('‚ùå Escape n√£o fechou as sugest√µes');
          results.failed++;
        }
      } else {
        console.log('‚ùå Sugest√µes n√£o apareceram');
        results.failed++;
      }
      
      // Fechar formul√°rio
      await page.click('button:has-text("Cancelar")');
      await page.waitForTimeout(500);
      
    } catch (error) {
      console.log('‚ùå Erro no teste de Escape:', error.message);
      results.failed++;
    }

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL DA NAVEGA√á√ÉO POR TECLADO');
    console.log('=' .repeat(50));
    console.log(`Total de testes: ${results.total}`);
    console.log(`‚úÖ Passou: ${results.passed}`);
    console.log(`‚ùå Falhou: ${results.failed}`);
    console.log(`üìà Taxa de sucesso: ${((results.passed / results.total) * 100).toFixed(1)}%`);
    
    if (results.failed === 0) {
      console.log('\nüéâ TODOS OS TESTES DE NAVEGA√á√ÉO POR TECLADO PASSARAM!');
      console.log('‚úÖ A navega√ß√£o por teclado est√° funcionando perfeitamente em todos os formul√°rios.');
    } else {
      console.log('\n‚ö†Ô∏è  Alguns testes falharam. Verifique os detalhes acima.');
    }
    
    console.log('\nüìù DICAS DE USO:');
    console.log('‚Ä¢ Use ‚Üë‚Üì para navegar nas sugest√µes');
    console.log('‚Ä¢ Pressione Enter para selecionar');
    console.log('‚Ä¢ Pressione Escape para fechar as sugest√µes');
    console.log('‚Ä¢ As dicas aparecem nos labels dos campos');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  } finally {
    await browser.close();
  }
}

// Executar o teste
testKeyboardNavigation().catch(console.error); 