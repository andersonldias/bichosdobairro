const Pet = require('./src/models/Pet');
const Client = require('./src/models/Client');

async function testPetsModule() {
  console.log('üß™ Testando m√≥dulo de Pets...\n');
  
  try {
    // Teste 1: Verificar se h√° clientes para testar
    console.log('1Ô∏è‚É£ Verificando clientes dispon√≠veis...');
    const clients = await Client.findAll();
    console.log(`   ‚úÖ Encontrados ${clients.length} clientes`);
    
    if (clients.length === 0) {
      console.log('   ‚ö†Ô∏è  Nenhum cliente encontrado. Crie alguns clientes primeiro.');
      return;
    }
    
    const testClient = clients[0];
    console.log(`   üìã Usando cliente: ${testClient.name} (ID: ${testClient.id})`);
    
    // Teste 2: Criar um pet de teste
    console.log('\n2Ô∏è‚É£ Criando pet de teste...');
    const testPetData = {
      name: 'Pet Teste',
      species: 'Cachorro',
      breed: 'Labrador',
      age: 3,
      weight: 25.5,
      observations: 'Pet criado para teste do sistema',
      client_id: testClient.id
    };
    
    const newPet = await Pet.create(testPetData);
    console.log(`   ‚úÖ Pet criado: ${newPet.name} (ID: ${newPet.id})`);
    
    // Teste 3: Buscar pet por ID
    console.log('\n3Ô∏è‚É£ Buscando pet por ID...');
    const foundPet = await Pet.findById(newPet.id);
    if (foundPet) {
      console.log(`   ‚úÖ Pet encontrado: ${foundPet.name} - Cliente: ${foundPet.client_name}`);
    } else {
      console.log('   ‚ùå Pet n√£o encontrado');
    }
    
    // Teste 4: Buscar pets do cliente
    console.log('\n4Ô∏è‚É£ Buscando pets do cliente...');
    const clientPets = await Pet.findByClientId(testClient.id);
    console.log(`   ‚úÖ Encontrados ${clientPets.length} pets do cliente`);
    
    // Teste 5: Atualizar pet
    console.log('\n5Ô∏è‚É£ Atualizando pet...');
    const updateData = {
      name: 'Pet Teste Atualizado',
      species: 'Cachorro',
      breed: 'Golden Retriever',
      age: 4,
      weight: 28.0,
      observations: 'Pet atualizado para teste',
      client_id: testClient.id
    };
    
    const updatedPet = await Pet.update(newPet.id, updateData);
    console.log(`   ‚úÖ Pet atualizado: ${updatedPet.name}`);
    
    // Teste 6: Buscar pets por esp√©cie
    console.log('\n6Ô∏è‚É£ Buscando pets por esp√©cie...');
    const dogs = await Pet.findBySpecies('Cachorro');
    console.log(`   ‚úÖ Encontrados ${dogs.length} cachorros`);
    
    // Teste 7: Buscar estat√≠sticas
    console.log('\n7Ô∏è‚É£ Buscando estat√≠sticas...');
    const stats = await Pet.getStats();
    console.log(`   ‚úÖ Estat√≠sticas: ${stats.total_pets} pets totais, ${stats.dogs_count} cachorros, ${stats.cats_count} gatos`);
    
    // Teste 8: Buscar esp√©cies dispon√≠veis
    console.log('\n8Ô∏è‚É£ Buscando esp√©cies dispon√≠veis...');
    const species = await Pet.getSpecies();
    console.log(`   ‚úÖ Esp√©cies encontradas: ${species.length}`);
    species.forEach(s => console.log(`      - ${s.species}: ${s.count} pets`));
    
    // Teste 9: Buscar pets
    console.log('\n9Ô∏è‚É£ Testando busca de pets...');
    const searchResults = await Pet.search('teste');
    console.log(`   ‚úÖ Busca por "teste": ${searchResults.length} resultados`);
    
    // Teste 10: Listar todos os pets
    console.log('\nüîü Listando todos os pets...');
    const allPets = await Pet.findAll();
    console.log(`   ‚úÖ Total de pets: ${allPets.length}`);
    
    // Teste 11: Deletar pet de teste
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Deletando pet de teste...');
    await Pet.delete(newPet.id);
    console.log(`   ‚úÖ Pet deletado com sucesso`);
    
    // Verifica√ß√£o final
    console.log('\n‚úÖ Todos os testes do m√≥dulo de Pets foram executados com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testPetsModule();
}

module.exports = testPetsModule; 