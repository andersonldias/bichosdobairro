const puppeteer = require('puppeteer');

async function testAgendaComplete() {
  console.log('üß™ Iniciando teste completo da Agenda e Sistema de Servi√ßos...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    slowMo: 100,
    defaultViewport: { width: 1400, height: 900 }
  });
  
  const page = await browser.newPage();
  
  try {
    // Navegar para a aplica√ß√£o
    await page.goto('http://localhost:5173');
    console.log('‚úÖ Aplica√ß√£o carregada');
    
    // Aguardar carregamento inicial
    await page.waitForSelector('body', { timeout: 5000 });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const results = {
      total: 0,
      passed: 0,
      failed: 0,
      details: []
    };

    // Teste 1: Verificar se a p√°gina de Agenda carrega
    console.log('\nüìã Teste 1: Carregamento da p√°gina de Agenda...');
    results.total++;
    
    try {
      // Ir para a p√°gina de Agenda
      await page.click('a[href="/agenda"]');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se o t√≠tulo da agenda aparece
      const agendaTitle = await page.$eval('h1', el => el.textContent);
      if (agendaTitle.includes('Agenda')) {
        console.log('‚úÖ P√°gina de Agenda carregada corretamente');
        results.passed++;
      } else {
        console.log('‚ùå P√°gina de Agenda n√£o carregou');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro ao carregar p√°gina de Agenda:', error.message);
      results.failed++;
    }

    // Teste 2: Verificar navega√ß√£o do calend√°rio
    console.log('\nüìã Teste 2: Navega√ß√£o do calend√°rio...');
    results.total++;
    
    try {
      // Verificar se os bot√µes de navega√ß√£o existem
      const prevButton = await page.$('button svg[data-lucide="chevron-left"]');
      const nextButton = await page.$('button svg[data-lucide="chevron-right"]');
      
      if (prevButton && nextButton) {
        console.log('‚úÖ Bot√µes de navega√ß√£o do calend√°rio encontrados');
        
        // Testar navega√ß√£o para o pr√≥ximo m√™s
        await page.click('button svg[data-lucide="chevron-right"]');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Verificar se o m√™s mudou
        const monthText = await page.$eval('h2', el => el.textContent);
        console.log('‚úÖ Navega√ß√£o do calend√°rio funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Bot√µes de navega√ß√£o n√£o encontrados');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro na navega√ß√£o do calend√°rio:', error.message);
      results.failed++;
    }

    // Teste 3: Verificar filtros e busca
    console.log('\nüìã Teste 3: Filtros e busca da Agenda...');
    results.total++;
    
    try {
      // Verificar campo de busca
      const searchInput = await page.$('input[placeholder="Buscar agendamentos..."]');
      if (searchInput) {
        await searchInput.type('teste');
        await new Promise(resolve => setTimeout(resolve, 500));
        console.log('‚úÖ Campo de busca funcionando');
        
        // Verificar filtro de status
        const statusFilter = await page.$('select');
        if (statusFilter) {
          await statusFilter.select('agendado');
          await new Promise(resolve => setTimeout(resolve, 500));
          console.log('‚úÖ Filtro de status funcionando');
          results.passed++;
        } else {
          console.log('‚ùå Filtro de status n√£o encontrado');
          results.failed++;
        }
      } else {
        console.log('‚ùå Campo de busca n√£o encontrado');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro nos filtros:', error.message);
      results.failed++;
    }

    // Teste 4: Verificar p√°gina de Servi√ßos
    console.log('\nüìã Teste 4: P√°gina de Servi√ßos...');
    results.total++;
    
    try {
      // Ir para a p√°gina de Servi√ßos
      await page.click('a[href="/services"]');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se o t√≠tulo aparece
      const servicesTitle = await page.$eval('h1', el => el.textContent);
      if (servicesTitle.includes('Servi√ßos')) {
        console.log('‚úÖ P√°gina de Servi√ßos carregada');
        
        // Verificar se as abas existem
        const cadastroTab = await page.$('button:has-text("Cadastro de Servi√ßos")');
        const visualizarTab = await page.$('button:has-text("Visualizar Agendamentos")');
        
        if (cadastroTab && visualizarTab) {
          console.log('‚úÖ Abas da p√°gina de Servi√ßos encontradas');
          results.passed++;
        } else {
          console.log('‚ùå Abas n√£o encontradas');
          results.failed++;
        }
      } else {
        console.log('‚ùå P√°gina de Servi√ßos n√£o carregou');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro na p√°gina de Servi√ßos:', error.message);
      results.failed++;
    }

    // Teste 5: Testar cadastro de servi√ßo
    console.log('\nüìã Teste 5: Cadastro de servi√ßo...');
    results.total++;
    
    try {
      // Verificar se o formul√°rio existe
      const form = await page.$('form');
      if (form) {
        console.log('‚úÖ Formul√°rio de cadastro encontrado');
        
        // Verificar campos obrigat√≥rios
        const clienteInput = await page.$('input[placeholder="Selecione o cliente..."]');
        const petInput = await page.$('input[placeholder="Selecione o pet..."]');
        const tipoInput = await page.$('input[placeholder="Tipo de servi√ßo..."]');
        const valorInput = await page.$('input[placeholder="Digite o valor do servi√ßo"]');
        const dataInput = await page.$('input[type="date"]');
        
        if (clienteInput && petInput && tipoInput && valorInput && dataInput) {
          console.log('‚úÖ Todos os campos do formul√°rio encontrados');
          results.passed++;
        } else {
          console.log('‚ùå Campos do formul√°rio incompletos');
          results.failed++;
        }
      } else {
        console.log('‚ùå Formul√°rio n√£o encontrado');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro no cadastro de servi√ßo:', error.message);
      results.failed++;
    }

    // Teste 6: Testar navega√ß√£o por teclado nos campos
    console.log('\nüìã Teste 6: Navega√ß√£o por teclado...');
    results.total++;
    
    try {
      // Testar campo de cliente
      await page.click('input[placeholder="Selecione o cliente..."]');
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.keyboard.press('ArrowDown');
      await new Promise(resolve => setTimeout(resolve, 300));
      await page.keyboard.press('Enter');
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Verificar se foi selecionado
      const clienteValue = await page.$eval('input[placeholder="Selecione o cliente..."]', el => el.value);
      if (clienteValue) {
        console.log('‚úÖ Navega√ß√£o por teclado no campo cliente funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Navega√ß√£o por teclado no campo cliente falhou');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro na navega√ß√£o por teclado:', error.message);
      results.failed++;
    }

    // Teste 7: Verificar visualiza√ß√£o de agendamentos
    console.log('\nüìã Teste 7: Visualiza√ß√£o de agendamentos...');
    results.total++;
    
    try {
      // Ir para a aba de visualiza√ß√£o
      await page.click('button:has-text("Visualizar Agendamentos")');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Verificar se a tabela ou lista aparece
      const table = await page.$('table');
      const list = await page.$('.space-y-4');
      
      if (table || list) {
        console.log('‚úÖ Lista de agendamentos carregada');
        results.passed++;
      } else {
        console.log('‚ùå Lista de agendamentos n√£o encontrada');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro na visualiza√ß√£o de agendamentos:', error.message);
      results.failed++;
    }

    // Teste 8: Verificar estat√≠sticas
    console.log('\nüìã Teste 8: Estat√≠sticas da Agenda...');
    results.total++;
    
    try {
      // Voltar para a Agenda
      await page.click('a[href="/agenda"]');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Verificar se as estat√≠sticas aparecem
      const statsCards = await page.$$('.card');
      if (statsCards.length >= 3) {
        console.log('‚úÖ Estat√≠sticas da Agenda carregadas');
        results.passed++;
      } else {
        console.log('‚ùå Estat√≠sticas n√£o encontradas');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro nas estat√≠sticas:', error.message);
      results.failed++;
    }

    // Teste 9: Verificar sele√ß√£o de data no calend√°rio
    console.log('\nüìã Teste 9: Sele√ß√£o de data no calend√°rio...');
    results.total++;
    
    try {
      // Clicar em uma data no calend√°rio
      const calendarDays = await page.$$('.min-h-\\[100px\\]');
      if (calendarDays.length > 0) {
        await calendarDays[10].click(); // Clicar em um dia do meio do m√™s
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Verificar se a data foi selecionada
        const selectedDay = await page.$('.bg-blue-100.border-blue-400');
        if (selectedDay) {
          console.log('‚úÖ Sele√ß√£o de data no calend√°rio funcionando');
          results.passed++;
        } else {
          console.log('‚ùå Sele√ß√£o de data n√£o funcionou');
          results.failed++;
        }
      } else {
        console.log('‚ùå Dias do calend√°rio n√£o encontrados');
        results.failed++;
      }
    } catch (error) {
      console.log('‚ùå Erro na sele√ß√£o de data:', error.message);
      results.failed++;
    }

    // Teste 10: Verificar responsividade
    console.log('\nüìã Teste 10: Responsividade...');
    results.total++;
    
    try {
      // Mudar para viewport mobile
      await page.setViewport({ width: 768, height: 1024 });
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Verificar se os elementos ainda est√£o vis√≠veis
      const header = await page.$('h1');
      const calendar = await page.$('.grid.grid-cols-7');
      
      if (header && calendar) {
        console.log('‚úÖ Layout responsivo funcionando');
        results.passed++;
      } else {
        console.log('‚ùå Problemas de responsividade');
        results.failed++;
      }
      
      // Voltar para desktop
      await page.setViewport({ width: 1400, height: 900 });
    } catch (error) {
      console.log('‚ùå Erro no teste de responsividade:', error.message);
      results.failed++;
    }

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL DA AGENDA E SISTEMA DE SERVI√áOS');
    console.log('=' .repeat(60));
    console.log(`Total de testes: ${results.total}`);
    console.log(`‚úÖ Passou: ${results.passed}`);
    console.log(`‚ùå Falhou: ${results.failed}`);
    console.log(`üìà Taxa de sucesso: ${((results.passed / results.total) * 100).toFixed(1)}%`);
    
    if (results.failed === 0) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM!');
      console.log('‚úÖ A Agenda e o Sistema de Servi√ßos est√£o funcionando perfeitamente.');
    } else {
      console.log('\n‚ö†Ô∏è  Alguns testes falharam. Verifique os detalhes acima.');
    }
    
    console.log('\nüìù FUNCIONALIDADES TESTADAS:');
    console.log('‚Ä¢ Carregamento da p√°gina de Agenda');
    console.log('‚Ä¢ Navega√ß√£o do calend√°rio');
    console.log('‚Ä¢ Filtros e busca');
    console.log('‚Ä¢ P√°gina de Servi√ßos');
    console.log('‚Ä¢ Cadastro de servi√ßos');
    console.log('‚Ä¢ Navega√ß√£o por teclado');
    console.log('‚Ä¢ Visualiza√ß√£o de agendamentos');
    console.log('‚Ä¢ Estat√≠sticas');
    console.log('‚Ä¢ Sele√ß√£o de data');
    console.log('‚Ä¢ Responsividade');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  } finally {
    await browser.close();
  }
}

// Executar o teste
testAgendaComplete().catch(console.error); 